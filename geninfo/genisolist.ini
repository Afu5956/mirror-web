# This file is the config required by genisolist.py

# This special section named "%main%" defined following variables:
# "root": HTTP root of mirrors. The script will locate the images in it.
# "urlbase": URL of mirrors prepended to image path. We want to use relative
#            path, so set it to '/' instead of complete URL.
# "d[N]": For distribution sorting. where N is an positive integer. The value
#         is disto name specified in below sections. Lower N makes the distro
#         show higher. Default N is 0xFFFF for distro not mentioned.
[%main%]
root = /data
urlbase = /
d10 = CentOS
d20 = Ubuntu

# Sections whose name isn't "%main%" defined a detect rule of image detection.
# [archlinux]
# Section name is of no use, the display name is specified in "distro" option.
# distro = Arch Linux
# listvers defined how many latest versions to display.
# listvers = 1
# "location" specifies globbing pathname of the image. The path is relative to
# the HTTP root (aka "root" in [%main%] section). Not all images match it is
# considered, you can use "pattern" option below to filter.
# location = archlinux/iso/latest/archlinux-*.iso
# "pattern" is a regular expression. If the pattern is found in image path
# found by "location", then the image is valid. Group capturing is to extract
# image info from image path name.
# pattern = archlinux-(\d+\.\d+\.\d+)-(\w+).iso
# Following 3 options describes image info. "type" and "platform" is optional.
# $1, $2... here will be replaced by the string captured in above "pattern".
# Additionally, $0 will be replaced by the whole string matches the pattern.
# "version" is also used as the key to sort images of the same distro.
# version = $1
# type = CLI-only
# platform = $2
# "key_by" (a.k.a group by) should be used when images of different types or platform have
# different version number, see lineageOS below.
# "nosort" should be used when sort is not possible, in this case listvers should not be set
# when "nosort" presents (regardless of value), sort would not occue

[ubuntu desktop]
distro = Ubuntu
listvers = 4
# If one glob is not enough for locating all images, you can use "location_N"
# to specify more globs. N start from 0 and must a sequence (0,1,2...).
location_0 = ubuntu-releases/[a-z]*/ubuntu-*-desktop-amd64.iso
pattern = ubuntu-([0-9.]+)-desktop-(\w+).iso
version = $1
type = Desktop LiveDVD
platform = $2

[ubuntu live server]
distro = Ubuntu
listvers = 4
# If one glob is not enough for locating all images, you can use "location_N"
# to specify more globs. N start from 0 and must a sequence (0,1,2...).
location_0 = ubuntu-releases/[a-z]*/ubuntu-*-live-server-amd64.iso
pattern = ubuntu-([0-9.]+)-live-server-(\w+).iso
version = $1
type = Server
platform = $2

[ubuntu server]
distro = Ubuntu
listvers = 4
# If one glob is not enough for locating all images, you can use "location_N"
# to specify more globs. N start from 0 and must a sequence (0,1,2...).
location_0 = ubuntu-releases/[a-z]*/ubuntu-*-server-amd64.iso
pattern = ubuntu-([0-9.]+)-server-(\w+).iso
version = $1
type = Server
platform = $2

# You can apply multiple rules (sections) for the same distro like following
# four sections. They will be shown in the same submenu on our web page.
[centos]
distro = CentOS
listvers = 2
location = centos/[0-9].*/isos/*/CentOS-[0-9]*.iso
pattern = CentOS-([0-9.]+)-(\w+)-((bin-)?\w+?)(-[0-9]+|).iso
version = $1
type = $3
platform = $2

[raspberry-pi-os-images]
distro = Raspberry Pi OS (原 Raspbian)
listvers = 1
location = raspberry-pi-os-images/raspios*/images/raspios*/*.zip
pattern = ([-0-9]+)-raspios-(.+)-(.+)\.zip
platform = $3
type = $2
version = $1

[qt5]
distro = Qt 5
listvers = 1
location_0 = qt/official_releases/qt/5.*/5.*/qt-opensource-*
location_1 = qt/official_releases/qtcreator/*/*/qt-creator-opensource-*
pattern = (qt|qt-creator)-opensource-(.*?)-([\d.]+).(run|dmg|exe)
platform = $2
version = $1 $3
key_by = $1
category = app

[msys2]
distro = MSYS2
listvers = 1
location = msys2/distrib/msys2-*.exe
pattern = msys2-(i686|x86_64)-(latest).exe
platform = Windows
type = $1
version = $2
category = app

[texlive]
distro = TeX 排版系统
listvers = 1
location = CTAN/systems/texlive/Images/texlive*.iso
pattern = texlive(\d+)-\d+.iso
platform = Windows & Linux
version = TeX Live $1
category = app

[mactex]
distro = TeX 排版系统
listvers = 1
location = CTAN/systems/mac/mactex/mactex-*.pkg
pattern = mactex-(\d+).pkg
platform = macOS
version = MacTeX $1
category = app

[mactex-pretest]
distro = TeX 排版系统
listvers = 1
location = tlpretest/mactex-*.pkg
pattern = mactex-(\d+).pkg
platform = macOS
version = MacTeX (pretest) $1
category = app

[miktex]
distro = TeX 排版系统
listvers = 1
location = CTAN/systems/win32/miktex/setup/windows-*/basic-miktex-*
pattern = basic-miktex-((\d+.)+\d+)(|-)*(x64)*.exe
platform = Windows
type = $4
version = MikTeX $1
category = app

[miktex-mac]
distro = TeX 排版系统
listvers = 1
location = CTAN/systems/win32/miktex/setup/darwin-*/miktex-*
pattern = miktex-((\d+.)+\d+)-darwin-(.*).dmg
platform = macOS
type = $3
version = MikTeX $1
category = app

[anaconda3]
distro = Conda
listvers = 1
location = anaconda/archive/Anaconda*
pattern = (Anaconda3)-([\d\.]+)-(Windows|Linux|MacOSX)-(x86_64|x86).(\w+)
platform = $3/$4
type = $5
version = $1 $2
category = app

[anaconda2]
distro = Conda
listvers = 1
location = anaconda/archive/Anaconda*
pattern = (Anaconda2)-([\d\.]+)-(Windows|Linux|MacOSX)-(x86_64|x86).(\w+)
platform = $3/$4
type = $5
version = $1 $2
category = app

[miniconda37]
distro = Conda
listvers = 1
location = anaconda/miniconda/Miniconda*
pattern = (Miniconda3-py37)_([\d\.]+)-(Windows|Linux|MacOSX)-(x86_64|x86).(\w+)
platform = $3/$4
type = $5
version = $1 $2
category = app

[miniconda38]
distro = Conda
listvers = 1
location = anaconda/miniconda/Miniconda*
pattern = (Miniconda3-py38)_([\d\.]+)-(Windows|Linux|MacOSX)-(x86_64|x86).(\w+)
platform = $3/$4
type = $5
version = $1 $2
category = app

[miniconda2]
distro = Conda
listvers = 1
location = anaconda/miniconda/Miniconda*
pattern = (Miniconda2)-([\d\.]+)-(Windows|Linux|MacOSX)-(x86_64|x86).(\w+)
platform = $3/$4
type = $5
version = $1 $2
category = app

[android-x86]
distro = Android-x86
listvers = 40
location = osdn/android-x86/*/*.iso
pattern = osdn/android-x86/[0-9]+/android-(x86_64|x86)-([0-9\.]+)-([\w-]*)\.iso
version = $2
type = $3
platform = $1

[libreoffice]
distro = LibreOffice
listvers = 2
location = libreoffice/libreoffice/stable/*/*/*/*
pattern = libreoffice/libreoffice/stable/([\d\.]+)/(\w+)/(\w+)/LibreOffice_[\d\.]+_[a-zA-Z]+_[-468x]+(_rpm|_deb)?\.(dmg|msi|tar\.gz)(?!.)
platform = $2
type = $3
version = $1
category = app

[julia]
distro = Julia
listvers = 1
location = julia-releases/bin/*/*/*/julia-*
# This regex does not capture release candidate (rc) versions
pattern = /(x64|x86|aarch64|armv7l)/[\d\.]+/julia-([\d\.]+)-(freebsd|mac|linux|win)\d*-?\w+\.(dmg|pkg|exe|tar\.gz)(?!.)
platform = $3/$1
version = $2
type = $4
key_by = $3 $2
category = app

[texstudio]
distro = TeX 排版系统
listvers = 1
location = github-release/texstudio-org/texstudio/LatestRelease/*
pattern = texstudio-([\d\.]+)-(.+)\.(\w+)
platform = $2
type = $3
version = TeXstudio $1
category = app

[lyx]
distro = TeX 排版系统
listvers = 1
location = lyx/bin/*/*
pattern = [lL]yx-([\.\d]+)-?_?([^/]+)\.(dmg|exe|tar\.gz)(?!.)
version = LyX $1
platform = $2
type = $3
key_by = $2 $3
category = app

[rust-analyzer]
distro = rust-analyzer
category = app
nosort = true
location = github-release/rust-analyzer/rust-analyzer/LatestRelease/*
pattern = ([^/]+)$
version = $1

[orchestrator]
distro = orchestrator
category = app
nosort = true
location = github-release/openark/orchestrator/LatestRelease/*
pattern = ([^/]+)$
version = $1

[kde-neon]
distro = KDE neon
location = kde-application/neon/images/*/current/*
pattern = kde-application/neon/images/(.+)/current/neon-(.+)-current\.iso(?!.)
version = $1
nosort = true
platform = iso
